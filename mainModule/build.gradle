apply plugin: 'com.android.application'

def cfg = rootProject.ext.android
def appId = rootProject.ext.appId

android {

    //打包时的相关配置
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }



    compileSdkVersion cfg.compileSdkVersion
    buildToolsVersion cfg.buildToolsVersion

    //64K方法数限制分包处理
    dexOptions {

        //这个模式允许单个 Dex 文件支持到 32 为大小的 strings 引用，即 2^32 的引用峰值
        jumboMode = true

    }

    lintOptions {
        //checkReleaseBuilds就是在打包Release版本的时候进行检测，这里就直接关掉了，这样即使有报错也不会停止打包了
        checkReleaseBuilds false
        // 如果为true，则在发现错误时停止gradle构建
        abortOnError false
    }

    //解决库依赖冲突问题
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }
    //通过修改SourceSets中的属性，可以指定哪些源文件（或文件夹下的源文件）要被编译，哪些源文件要被排除
    sourceSets  {
        main {
            if (isModuleRun.toBoolean()) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    //release 时 debug 目录下文件不需要合并到主工程  编译时不包含文件的路径
                    exclude '**/debug/**'
                }
            }
        }
    }


    defaultConfig {

        multiDexEnabled true
        applicationId appId["app"]
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode//更新次数
        versionName cfg.versionName//版本号

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
}

//编译期组件隔离，运行期组件按需依赖
//mainModule需要跟cartModule,goodsModule,usersModule进行交互，所以在运行期添加了依赖
if(!isModuleRun.toBoolean()){
    //获取当前运行的task
    def tasks = project.gradle.startParameter.taskNames
    for (String task : tasks){
        def upperName = task.toUpperCase()
        //判断task是编译期还是运行期
        if(upperName.contains("ASSEMBLE")||upperName.contains("INSTALL")){
            dependencies.add("compile", project.project(':' + 'cartmodule'))
            dependencies.add("compile", project.project(':' + 'goodsmodule'))
            dependencies.add("compile", project.project(':' + 'usermodule'))
            dependencies.add("compile", project.project(':' + 'ordermodule'))
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':routermodule')
}
